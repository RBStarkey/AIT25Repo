@page "/emailpicker"
@using BlazorApp.Client.Services
@inject IJSRuntime JSRuntime
@inject IWebAssemblyHostEnvironment Env;
@inject HttpClient Http
@inject ILogger<Emailpicker> Logger
@inject JsonFileService JsonFileService
@inject Microsoft.AspNetCore.Components.NavigationManager NavMan

@using BlazorApp.Shared

<div class="container-fluid p-0 m-0">
	<div class="row w-100 d-inline-flex pt-2" style="background-color:navy">
		<div class="col-sm-1">
			<!--Home-->
			<i class="bi bi-house-door" style="font-size: 2rem; color: white"
			data-toggle="tooltip" data-placement="bottom" title="Home"
			@onclick=HomeClick>
			</i>
		</div>
		<div class="col-sm-10 d-flex justify-content-center" style="padding-top:0.4em;color:white">
			<h3>Email Picker</h3>
		</div>
		<div class="col-sm-1 d-flex justify-content-end" style="padding-top:0.7em">
			<button class="btn-link" style="background-color:transparent;border-color:transparent"
			@onclick=ShowHelpClick>
				<sup><i class="bi bi-info-circle" style="font-size: 2rem; color: white;"></i></sup>
			</button>
		</div>
	</div>

	@if (ShowSpinner)
	{
		<div>
			<span class="sr-only">Loading...</span>
		</div>
		<div class="spinner-border" role="status">
		</div>
	}
	@if (!ShowSpinner)
	{
		<!--Button Bar-->
		<div class="row w-100 d-flex justify-content-start p-2 mt-2 align-middle"
		style="background-color:gainsboro;border-radius:10px">
			<div class="col-auto">
				<button class="btn btn-primary" @onclick=@PreviewClick>
					Preview Clipboard List &nbsp;<i class="bi bi-eyeglasses"></i>
				</button>
			</div>
			<div class="col-auto">
				<button class="btn btn-primary" @onclick=@CopyToClipBoardClick>Copy to Clipboard &nbsp;<i class="bi bi-clipboard-plus"></i></button>
			</div>
		</div>

		@if (Preview)
		{
			<div class="row w-100 alert alert-success mt-2 mb-0" role="alert">
				<h5>
					@SortedString
				</h5>
			</div>
		}
		<!--Table-->
		<table class="table w-auto table-hover table-striped mt-2">
			<thead>
				<tr class="align-middle" style="text-align:center">
					<th style="display:none">ID</th>
					<th>
						<input class="form-check-input" type="checkbox" id="check-uncheck" name="check-uncheck"
						value="false" style="width:1.5em;height:1.5em;border: 2px solid black; border-radius: 0.25em"
						@onchange=@((ChangeEventArgs e)=>CheckUncheckAll(e)) />
					</th>
					<th>Name</th>
					<th>Job Description</th>
					<th>	Email	</th>
					<th>Mobile</th>
					<th>Department</th>
					<th style="display:none">IsVisible</th>
				</tr>
			</thead>
			<tbody>
				@foreach (Contact item in ContactList)
				{
					if (item.IsVisible)
					{
						<tr class="align-middle">
							<td style="display:none">@item.Id</td>
							<td style="display:none">@item.IsSelected</td>
							<td class="pt-3" style="text-align: center">
								<input type="checkbox" id="@item.Id.ToString()" name="@item.Id.ToString()"
								value="add" checked="@item.IsSelected" style="width:1.5em;height:1.5em"
								@onchange="@(e => AddRemoveEmail(e, item.Id))" />
							</td>
							<td>@item.ContactName</td>
							<td>@item.JobDescription</td>
							<td>@item.Email</td>
							<td>@item.Mobile</td>
							<td>@item.Department</td>
							<td style="display:none">@item.IsVisible</td>
						</tr>
					}

				}
			</tbody>
		</table>
	}

	@if (OKDLogVisible)
	{
		<ModalDialogOK Message=@OKDlogMessage
		Caption="@OKDlogCaption"
		DlogSize=@OKDLogSize
		OnClose=@OKDlogClose>
		</ModalDialogOK>
	}
	<!--Help-->
	<div class="offcanvas offcanvas-end @ShowHelp" tabindex="-1" id="offcanvasEmailPicker"
	aria-labelledby="offcanvasEmailPickerLabel"
	aria-modal="true" role="dialog" style="visibility: visible;background-color:gainsboro">
		<div class="offcanvas-header">
			<h5 class="offcanvas-title" id="offcanvasExampleLabel">Email Picker - Help</h5>
			<button type="button" class="btn-close text-reset" data-bs-dismiss="offcanvas" aria-label="Close" @onclick=HideHelpClick></button>
		</div>
		<div class="offcanvas-body">
			<div>
				<h5>Email Picker - Help</h5>
				<p>

				</p>

			</div>
		</div>
	</div>
</div>
@code {
	List<Contact> ContactList = new List<Contact>();
	string ShowOffCanvasEmailList { get; set; } = ""; //Default "", hides the list and "show" makes it appear
	bool Preview { get; set; } = false; // Shows the EmailList formatted for pasting into a form or document
	List<string> EmailList = new List<string>(); // The list that appears in the off canvas form
	string SortedString = string.Empty; // The preview list displayed at the top of the form with a green (alert-success) background
	bool ShowSpinner { get; set; } = true;
	string ShowHelp { get; set; } = "";

	#region  OKDialogRegion
	string? OKDlogCaption { get; set; }
	string OKDlogMessage = string.Empty;
	string OKDLogSize = string.Empty;
	public bool OKDLogVisible { get; set; } = false;

	void OKDlogClose()
	{
		OKDLogVisible = false;
	}
	#endregion
	protected override async Task OnInitializedAsync()
	{
		Logger.LogInformation("OnInitializedAsync started");

		ContactList = await JsonFileService.GetJsonFileAsync<List<Contact>>("JsonFiles/Contacts90.json");
		if (ContactList.Count() == 0)
		{
			OKDlogCaption = "On Initialized";
			OKDlogMessage = "No contact records found" + Globals.InformDBA;
			OKDLogSize = Globals.DLogSizeSmall;
			OKDLogVisible = true;
			Logger.LogInformation("No contact records found");
		}
		ShowSpinner = false;
	}
	async Task CheckUncheckAll(ChangeEventArgs e)
	{
		try
		{
			bool checkVal = (bool)e.Value;
			foreach (Contact item in ContactList)
			{
				item.IsSelected = checkVal;
				if (item.IsSelected)
				{
					EmailList.Add(item.Email);
				}
				else
				{
					EmailList.Remove(item.Email);
				}
			}
			if (EmailList.Count() == 0)
			{
				SortedString = string.Empty;
			}
			else
			{
				EmailList = EmailList.OrderBy(e => e).ToList();
				SortedString = string.Join("; ", EmailList);
			}
		}
		catch (Exception ex)
		{
			Logger.LogInformation("CheckUncheckAll - Exception: " + ex.Message);
		}
	}
	void PreviewClick()
	{
		SortedString = string.Join("; ", EmailList);
		Preview = !Preview;
	}
	async Task AddRemoveEmail(ChangeEventArgs e, Guid id)
	{
		bool checkVal = (bool)e.Value;
		Contact contact = ContactList.FirstOrDefault(c => c.Id == id);
		if (checkVal)
		{
			EmailList.Add(contact.Email.Trim());
			EmailList = EmailList.OrderBy(e => e).ToList();
		}
		else
		{
			EmailList.Remove(contact.Email.Trim());
		}
		SortedString = string.Join("; ", EmailList);
	}
	async Task CopyToClipBoardClick()
	{
		if (SortedString.Length == 0)
	{
			OKDlogCaption = "Copy To Clipboard Click";
			OKDlogMessage = "No text to copy, please tick at least one name";
			OKDLogSize = Globals.DLogSizeSmall;
			OKDLogVisible = true;
			Logger.LogInformation(OKDlogMessage);
			return;
	}
		await JSRuntime.InvokeVoidAsync("copyTextToClipboard", SortedString);
		Logger.LogInformation("copyTextToClipboard, items: " + EmailList.Count().ToString());
	}
	void HomeClick()
	{
		NavMan.NavigateTo("/");
	}
	void ShowHelpClick()
	{
		ShowHelp = "show";
	}

	void HideHelpClick()
	{
		// Is the help panel showing?
		if (ShowHelp == "show")
		{
			ShowHelp = "";
		}
	}
}
