@page "/emailpicker"
@using BlazorApp.Client.Services
@inject IJSRuntime JSRuntime
@inject IWebAssemblyHostEnvironment Env
@inject HttpClient Http
@inject ILogger<Emailpicker> Logger
@inject JsonFileService JSFileService
@inject Microsoft.AspNetCore.Components.NavigationManager NavMan
@using BlazorApp.Shared


<div class="container-fluid">
	<div class="row row-header w-100 d-inline-flex pt-2" style="background-color:navy">
		<div class="col-sm-1">
			<i class="bi bi-house-door" style="font-size: 2rem; color: white"data-toggle="tooltip" data-placement="bottom" title="Home" @onclick="HomeClick"></i>
		</div>
		<div class="col-sm-10 d-flex justify-content-center">
			<h3>Email Picker</h3>
		</div>
		<div class="col-sm-1 d-flex justify-content-end">
			<button class="btn-link" @onclick="ShowHelpClick">
				<i class="bi bi-info-circle" style="font-size: 2rem; color: white"></i>
			</button>
		</div>
	</div>

	@if (ShowSpinner)
	{
		<div>
			<span class="sr-only">Loading...</span>
		</div>
		<div class="spinner-border" role="status"></div>
	}
	else
	{
		<div class="row w-100 d-flex justify-content-start p-2 mt-2 align-middle" style="background-color:gainsboro;border-radius:10px">
			<div class="col-auto">
				<button class="btn btn-primary" @onclick="PreviewClick" disabled=@PreviewCopyButtonsDisabled>
					Preview Clipboard List &nbsp;<i class="bi bi-eyeglasses"></i>
				</button>
			</div>
			<div class="col-auto">
				<button class="btn btn-primary" @onclick="CopyToClipBoardClick" disabled=@PreviewCopyButtonsDisabled>
					Copy to Clipboard &nbsp;<i class="bi bi-clipboard-plus"></i>
				</button>
			</div>
			<div class="col-auto">
				<SearchBox SearchQueryChanged="ValueChanged"></SearchBox>
			</div>
		</div>

		@if (Preview)
		{
			<div class="row w-100 alert alert-success mt-2 mb-0" role="alert">
				<h5>@SortedString</h5>
			</div>
		}

		<table class="table w-auto table-hover table-striped mt-2">
			<thead>
				<tr class="align-middle" style="text-align:center">
					<th style="display:none">ID</th>
					<th></th>
					<th>
						<input class="form-check-input custom-checkbox" type="checkbox" id="check-uncheck" name="check-uncheck"
						@onchange="CheckUncheckAll" />
					</th>
					<th>Name</th>
					<th>Job Description</th>
					<th>Email</th>
					<th>Mobile</th>
					<th>Department</th>
					<th style="display:none">IsVisible</th>
					<th>Search string</th>
					<th>Search string2</th>
				</tr>
			</thead>
			<tbody>
				<tr class="row" style="display:none;">
					@(RowIndex = 0)
				</tr>
				@foreach (Contact item in ContactList)
				{
					if (item.IsVisible)
					{
						// Skips the rest of the statements and continues with the next iteration of the loop.
						if (!IsVisible(item.SearchString)) continue;
						<tr class="align-middle">
							<td style="width:1em">@(++RowIndex)</td>
							<td style="display:none">@item.Id</td>
							<td style="display:none">@item.IsSelected</td>
							<td class="pt-3" style="text-align: center">
								<input type="checkbox" class="custom-checkbox" id="@item.Id.ToString()" name="@item.Id.ToString()"
								value="add" checked="@item.IsSelected" @onchange="@(e => AddRemoveEmail(e, item.Id))" />
							</td>
							<td>@item.ContactName</td>
							<td>@item.JobDescription</td>
							<td>@item.Email</td>
							<td>@item.Mobile</td>
							<td>@item.Department</td>
							<td style="display:none">@item.IsVisible</td>
							<td>@item.SearchString</td>
						</tr>
					}
				}
			</tbody>
		</table>
	}

	@if (OKDLogVisible)
	{
		<ModalDialogOK Message="@OKDlogMessage" Caption="@OKDlogCaption" DlogSize="@OKDLogSize" OnClose="@OKDlogClose"></ModalDialogOK>
	}

	<div class="offcanvas offcanvas-end @ShowHelp" tabindex="-1" id="offcanvasEmailPicker" aria-labelledby="offcanvasEmailPickerLabel"
	aria-modal="true" role="dialog" style="visibility: visible;background-color:gainsboro">
		<div class="offcanvas-header">
			<h5 class="offcanvas-title" id="offcanvasExampleLabel">Email Picker - Help</h5>
			<button type="button" class="btn-close text-reset" data-bs-dismiss="offcanvas" aria-label="Close" @onclick="HideHelpClick"></button>
		</div>
		<div class="offcanvas-body">
			<div>
				<h5>How It Works</h5>
				<p>
					This page demonstrates a point and click method of selecting email addresses from a long list of contacts.
					The list would be generated from a database and displayed in a table like the one shown.
					After making a selection by clicking the checkbox in the first column, the email addresses are assembled into
					a long string of addresses which you can cut and past into the TO, or BCC field of an email form.
				</p>
				<h5>Preview Clipboard List Button</h5>
				<p>
					This button is optional feature which allows the selected items to be displayed as they appear on the clipboard.
				</p>
				<p>
					You can click this button to display a green panel and when you tick an email address, it will or disappear from the panel. The names are sorted alphabetically.
					This allows the user to review their selection.
				</p>
				<h5>Copy to the Clipboard Button</h5>
				<p>
					Clicking the button places the list of email addresses onto the clipboard. The system displays a confirmation message that a paste operation can be made.
					You can check this by opening a text editor (Notepad) and pasting the list into the page.
				</p>
				<h5>Select/Deselect Check Box</h5>
				<p>
					This checkbox appears on the top left of the table; clicking it will place or remove a tick in all the checkboxes.
				</p>
				<h5>Filter</h5>
				<p>
					Typing the first few characters of a person's name or department will filter the table so you can tick the required email addresses.
					Whilst using this feature you can't use the Preview or Copy buttons.
				</p>
			</div>
		</div>
	</div>
</div>

@code {

	List<Contact> ContactList = new List<Contact>();
	bool Preview { get; set; } = false; // Shows the EmailList formatted for pasting into a form or document
	List<string> EmailList = new List<string>(); // The list that appears in the off canvas form
	string SortedString = string.Empty; // The preview list displayed at the top of the form with a green (alert-success) background
	bool ShowSpinner { get; set; } = true;
	string ShowHelp { get; set; } = "";
	int RowIndex { get; set; }
	string Filter { get; set; } = "";
	bool PreviewCopyButtonsDisabled { get; set; } = false;

	#region OKDialogRegion
	string? OKDlogCaption { get; set; }
	string OKDlogMessage = string.Empty;
	string OKDLogSize = string.Empty;
	public bool OKDLogVisible { get; set; } = false;

	void OKDlogClose()
	{
		OKDLogVisible = false;
	}
	#endregion

	protected override async Task OnInitializedAsync()
	{
		Logger.LogInformation("OnInitializedAsync started");
		try
		{
			ContactList = await JSFileService.GetJsonFileAsync<List<Contact>>("JsonFiles/test.json");
			if (ContactList.Count == 0)
			{
				ShowDialog("On Initialized", "No contact records found" + Globals.InformDBA, Globals.DLogSizeSmall);
			}
		}
		catch (Exception ex)
		{
			ShowDialog("Error", "Failed to load contact records: " + ex.Message, Globals.DLogSizeSmall);
		}
		finally
		{
			ShowSpinner = false;
		}
	}

	void CheckUncheckAll(ChangeEventArgs e)
	{
		try
		{
			bool checkVal = (bool)e.Value;
			EmailList.Clear(); // In case user has ticked others and then ticks this box
			foreach (Contact item in ContactList)
			{
				item.IsSelected = checkVal;
				if (item.IsSelected)
				{
					EmailList.Add(item.Email);
				}
				else
				{
					EmailList.Remove(item.Email);
				}
			}
			UpdateClipboardString();
		}
		catch (Exception ex)
		{
			Logger.LogError(ex, "CheckUncheckAll - Exception");
		}
	}

	void PreviewClick()
	{
		if (EmailList.Count == 0)
		{
			Preview = false;
			SortedString = string.Empty;
			return;
		}
		UpdateClipboardString();
		Preview = !Preview;
	}

	void AddRemoveEmail(ChangeEventArgs e, Guid id)
	{
		try
		{
			bool checkVal = (bool)e.Value;
			var contact = ContactList.FirstOrDefault(c => c.Id == id);
			if (contact != null)
			{
				if (checkVal)
				{
					EmailList.Add(contact.Email.Trim());
				}
				else
				{
					EmailList.Remove(contact.Email.Trim());
				}
				UpdateClipboardString();
			}
		}
		catch (Exception ex)
		{
			Logger.LogError(ex, "AddRemoveEmail - Exception");
		}
	}

	async Task CopyToClipBoardClick()
	{
		if (EmailList.Count == 0)
		{
			ShowDialog("Copy to Clipboard", "No email addresses selected. Please try again", Globals.DLogSizeSmall);
			Logger.LogInformation("No email addresses selected");
			return;
		}
		await JSRuntime.InvokeVoidAsync("copyTextToClipboard", SortedString);
		Logger.LogInformation("copyTextToClipboard, items: " + EmailList.Count);
	}

	void UpdateClipboardString()
	{
		if (EmailList.Count == 0)
		{
			SortedString = string.Empty;
			Preview = false;
		}
		else
		{
			EmailList = EmailList.OrderBy(e => e).ToList();
			SortedString = string.Join("; ", EmailList);
		}
	}

	private bool IsVisible(string SearchString)
	{
		//Shows rows that have filter text
		if (string.IsNullOrEmpty(Filter))
		{
			return true;
		}

		if (SearchString.Contains(Filter, StringComparison.OrdinalIgnoreCase))
		{
			return true;
		}
		return false;
	}

	void ShowDialog(string caption, string message, string size)
	{
		OKDlogCaption = caption;
		OKDlogMessage = message;
		OKDLogSize = size;
		OKDLogVisible = true;
	}

	public void ValueChanged(string amendedFilter)
	{
		
		Filter = amendedFilter;
		PreviewCopyButtonsDisabled = Filter.Length > 0;
	}

	void HomeClick()
	{
		NavMan.NavigateTo("/");
	}

	void ShowHelpClick()
	{
		ShowHelp = "show";
	}

	void HideHelpClick()
	{
		ShowHelp = ShowHelp == "show" ? "" : "show";
	}

	// async Task  UpdateData()
	// {
	// 	foreach (Contact contact in ContactList)
	// 	{
	// 		contact.LoadSearchString();
	// 	}
	// 	await JSFileService.SaveJsonFileAsync("c:/temp/temp.json", ContactList);
	// }
}