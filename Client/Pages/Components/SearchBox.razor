@using System.Timers;
@using BlazorApp.Shared

@implements IDisposable

<div class="input-group align-items-center" style="width:10em">
	<input id="inputSearch" name="inputSearch" class="form-control"
		   placeholder=@Globals.SearchDotDotDot @attributes="AdditionalAttributes"
		   @bind="SearchQuery" @bind:event="oninput"
		   spellcheck="false" type="text" style="background-color:cornsilk" />
	<i class="bi bi-x position-absolute"
	   style="
			color:red;
			font-size:30px;
			right: 2px;
			cursor: pointer;
			z-index: 100;" @onclick=ClearFilter>
	</i>
</div>
@code {
	Timer? debounceTimer;
	string? searchQuery;

	[Parameter]
	public string? PlaceHolder { get; set; } = Globals.SearchDotDotDot;

	[Parameter]
	public string? SearchQuery
	{
		get => searchQuery;
		set
		{
			searchQuery = value;
			debounceTimer?.Stop();
			debounceTimer?.Start();
		}
	}
	[Parameter(CaptureUnmatchedValues = true)]
    public IDictionary<string, object>? AdditionalAttributes { get; set; }

    [Parameter]
    public int Debounce { get; set; } = 1000;

    [Parameter]
	public EventCallback<string> SearchQueryChanged { get; set; }

    protected override void OnInitialized()
    {
        debounceTimer = new Timer();
        debounceTimer.Interval = Debounce;
        debounceTimer.AutoReset = false;
        debounceTimer.Elapsed += Search;
    }

    async void Search(Object? source, ElapsedEventArgs e)
    {
		await InvokeAsync(() => SearchQueryChanged.InvokeAsync(SearchQuery));
    }

    public void Dispose()
    {
        debounceTimer!.Dispose();
    }
	public async void ClearFilter()
	{
		await InvokeAsync(() => SearchQueryChanged.InvokeAsync());
	}
}
